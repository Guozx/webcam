1、嵌入式端rtmp推流，三种方法
ffmpeg、gstreamer、librtmp
2、流媒体可以适用网络传输并可以进行实时显示，rmvb或者mp4必须全部下载完毕才可以解码播放

3、MJPEG-Streamer可以把MJPEG格式转换为流媒体进行传输

4、getopt_long这个函数
	int getopt_long(int argc, char * const argv[], const char *optstring, const struct option *longopts, int *longindex);
	 (1)只有一个字符，不带冒号――只表示选项， 如-c?
? ? 
	 (2)一个字符，后接一个冒号――表示选项后面带一个参数，如-a 100
? ? 
	 (3)一个字符，后接两个冒号――表示选项后面带一个可选参数，即参数可有可无，如果带参数，则选项与参数直接不能有空格
? ? ? ? 形式应该如-b200
	
	c = getopt_long(argc, argv, "hi:o:vb", long_options, NULL);
	这个表示-h 不带参数 -i带参数 -o带参数  -v 不带参数 -b不带参数
	当处理一个带参数的选项时，全局变量optarg会指向它的参数

5、struct _globals {
    int stop;

    /* input plugin */
    input in[MAX_INPUT_PLUGINS]; //这个里面存输入参数 就是-i后面跟的参数 也就是插件名
    int incnt;

    /* output plugin */
    output out[MAX_OUTPUT_PLUGINS];
    int outcnt;

    /* pointer to control functions */
    //int (*control)(int command, char *details);
	};

6、struct _input {
    char *plugin;
    char *name;
    void *handle;

    input_parameter param; // this holds the command line arguments

    // input plugin parameters
    struct _control *in_parameters;
    int parametercount;


    struct v4l2_jpegcompression jpegcomp;

    /* signal fresh frames */
    pthread_mutex_t db;
    pthread_cond_t  db_update;

    /* global JPG frame, this is more or less the "database" */
    unsigned char *buf;
    int size;

    /* v4l2_buffer timestamp */
    struct timeval timestamp;

    input_format *in_formats;
    int formatCount;
    int currentFormat; // holds the current format number
    
    void *context; // private data for the plugin

    int (*init)(input_parameter *, int id);
    int (*stop)(int);
    int (*run)(int);
    int (*cmd)(int plugin, unsigned int control_id, unsigned int group, int value, char *value_str);
};


----------------------------------------------------------------
typedef struct {
    int id;
    globals *pglobal;
    pthread_t threadID;
    pthread_mutex_t controls_mutex;
    struct vdIn *videoIn;
    context_settings *init_settings;
} context;


-----------------------------------------------------------------------

	struct vdIn {
    int fd;
    char *videodevice;
    char *status;
    char *pictName;
    struct v4l2_capability cap;
    struct v4l2_format fmt;
    struct v4l2_buffer buf;
    struct v4l2_requestbuffers rb;
    void *mem[NB_BUFFER];
    unsigned char *tmpbuffer;
    unsigned char *framebuffer;
    streaming_state streamingState;
    int grabmethod;
    int width;
    int height;
    int fps;
    int formatIn;
    int formatOut;
    int framesizeIn;
    int signalquit;
    int toggleAvi;
    int getPict;
    int rawFrameCapture;
    /* raw frame capture */
    unsigned int fileCounter;
    /* raw frame stream capture */
    unsigned int rfsFramesWritten;
    unsigned int rfsBytesWritten;
    /* raw stream capture */
    FILE *captureFile;
    unsigned int framesWritten;
    unsigned int bytesWritten;
    int framecount;
    int recordstart;
    int recordtime;
    uint32_t tmpbytesused;
    struct timeval tmptimestamp;
    v4l2_std_id vstd;
    unsigned long frame_period_time; // in ms
    unsigned char soft_framedrop;
    unsigned int dv_timings;
};

-----------------------------------------------------------------------------------------

	/* structure to store variables/functions for output plugin */
	typedef struct _output output;
	struct _output {
		char *plugin;
		char *name;
		void *handle;
		output_parameter param;

		// input plugin parameters
		struct _control *out_parameters;
		int parametercount;

		int (*init)(output_parameter *param, int id);
		int (*stop)(int);
		int (*run)(int);
		int (*cmd)(int plugin, unsigned int control_id, unsigned int group, int value, char *value_str);
};

------------------------------------------------------------------------------------------------------


7、在fork函数执行完毕后，如果创建新进程成功，则出现两个进程，一个是子进程，一个是父进程。在子进程中，fork函数返回0，在父进程中，fork返回新创建子进程的进程ID。我们可以通过fork返回的值来判断当前进程是子进程还是父进程。
    1）在父进程中，fork返回新创建子进程的进程ID；
    2）在子进程中，fork返回0；
    3）如果出现错误，fork返回一个负值；

8、编译需要的#include <linux/videodev2.h> 这个文件是在/usr/include/linux/videodev2.h

9、/usr/include/linux是用来编译当前系统的程序的；
/usr/src/linux/include/linux/是用来编译内核的，

要使用/usr/src/linux/include/linux的头文件，
可以用gcc -I /usr/src/linux-x.x.x/include/

一个是用户态下的搜索路径，一个是内核模块需要的头文件搜索路径，用的地方都不一样
/usr/include / linux标头是编译系统标准C库时使用的标头.它们归C库包装所有,并与标准C库保持同步更新.存在它们以提供内核的用户空间接口

10、make install 就是把so文件放到/usr/local/share/下面

11、signal(SIGPIPE, SIG_IGN);
	这个是捕捉到SIGPIPE这个信号，然后交给SIG_IGN这个信号处理函数去执行    SIG_IGN忽略信号
	产生SIGPIPE信号的场景：TCP是全双工的，假如A和B，B端close了他所负责的那条链路，如果A端还在write给B端发数据，B端就会发送RST报文给A端，如果A收到了RST之后还在继续发送调用write，那么就会产生SIGPIPE信号，这个信号的默认处理方式是进程退出
	原型：signal(int signum, sighandler_t handler)
12、signal(SIGINT, signal_handler	由Interrupt Key产生，通常是CTRL+C或者DELETE。发送给所有ForeGround Group的进程

13、	
	pthread_mutex_t db;
	条件变量 ？条件变量的用法？
    	pthread_cond_t  db_update;   
	销毁条件变量，只有在没有线程在该条件变量上等待时，才可以注销条件变量，否则会返回EBUSY
	pthread_cond_destroy(&global.in[i].db_update);
        pthread_mutex_destroy(&global.in[i].db);

	条件变量是线程同步的一种手段。条件变量用来自动阻塞一个线程，直到条件(predicate)满足被触发为止。通常情况下条件变量和互斥锁同时使	用。

	条件变量使我们可以睡眠等待某种条件出现。条件变量是利用线程间共享的全局变量进行同步的一种机制，主要包括两个动作：一个/多个线程等	待"条件变量的条件成立"而挂起；另一个线程使"条件成立"信号

14、	初始化同步信号量和互斥锁
	pthread_mutex_init(&global.in[i].db, NULL) != 0   
	pthread_cond_init(&global.in[i].db_update, NULL) != 0

15、	命令行：
	export LD_LIBRARY_PATH=.
	./mjpg_streamer -i "./input_uvc.so -y -d /dev/video1" -o "./output_http.so -p 1080 -w ./www"

16、 global.in[i].init = dlsym(global.in[i].handle, "input_init");
	if(global.in[i].init == NULL)  //注意这里和下面
	global.in[i].stop = dlsym(global.in[i].handle, "input_stop");
	global.in[i].run = dlsym(global.in[i].handle, "input_run");
	global.in[i].cmd = dlsym(global.in[i].handle, "input_cmd");

	global.in[i].init(&global.in[i].param, i)  //注意这里和上面，这里函数名后面不跟括号，表示函数指针，后面跟一个括号，才表示是执行函数的内容
--------------------------------------------------------------------------
	global.out[i].init = dlsym(global.out[i].handle, "output_init");
	global.out[i].stop = dlsym(global.out[i].handle, "output_stop");
 	global.out[i].run = dlsym(global.out[i].handle, "output_run");
	global.out[i].cmd = dlsym(global.out[i].handle, "output_cmd");
	global.out[i].init(&global.out[i].param, i)

17、pause()
	函数使调用进程挂起直至捕捉到一个信号

18、 for(i = 0; i < global.incnt; i++) 
	{global.in[i].run(i)}
     for(i = 0; i < global.outcnt; i++)
	{global.out[i].run(global.out[i].param.id)}

19、input_uvc.c
	pthread_mutex_t controls_mutex
	pthread_mutex_init(&controls_mutex, NULL)

20、calloc malloc 区别？
	malloc()函数分配的内存空间原来没有被使用过，则其中的每一位可能都是0;反之,如果这部分内存曾经被分配过,则其中可能遗留有各种各样的数据。
	calloc()会将所分配的内存空间中的每一位都初始化为零,也就是说,如果你是为字符类型或整数类型的元素分配内存,那麽这些元素将保证会被初始化为0;如果你是为指针类型的元素分配内存,那麽这些元素通常会被初始化为空指针;如果你为实型数据分配内存,则这些元素会被初始化为浮点型的零

21、fd = open()
	只要有一个权限被禁止则返回-1
	open函数返回的文件描述符fd一定是未使用的最小的文件描述符，那么如果0没有使用，那么我们open的时候，首先就会获取到fd=0的情况。默认情况下，0,1,2这三个句柄对应的是标准输入，标准输出，标准错误，系统进程默认会打开0，1，2这三个文件描述符，而且指向了键盘和显示器的设备文件

22、initDynCtrls 调整摄像头
	UVCIOC_CTRL_MAP - 将UVC控件映射到V4L2控件----？？ 这样可以通过V4L2直接控制UVC
	这个属于usb video class uvc驱动里面的


23、input_uvc.c
     input_init
	this->fd = open(this->videodevice, O_RDWR)
	//ret = ioctl(this->fd, VIDIOC_QUERYCAP, &cap);     //判断摄像头能力
	init_settings();
	pthread_mutex_init(&pctx->controls_mutex, NULL)
	init_videoIn(pctx->videoIn, dev, width, height, fps, format, 1, pctx->pglobal, id, tvnorm)//videoIn是一个关键结构体	
		init_v4l2(vd)
			vd->fd = OPEN_VIDEO(vd->videodevice, O_RDWR
			xioctl(vd->fd, VIDIOC_QUERYCAP, &vd->cap);//填充 v4l2_capability结构体
			ioctl(vd->fd, VIDIOC_S_STD, &vd->vstd）
			video_set_dv_timings(vd) //视频时序标准，就是sensor采样，行，场之类的
			ioctl(vd->fd, VIDIOC_SUBSCRIBE_EVENT, &sub)  //这个是订阅 事件件提供了一种通用的方式去传递事件到用户空间？？
			ret = xioctl(vd->fd, VIDIOC_S_PARM, setfps);
			xioctl(vd->fd, VIDIOC_REQBUFS, &vd->rb);//驱动开始分配NB_BUFFER个buffer  v4l2_requestbuffers结构体
			for(i = 0; i < NB_BUFFER; i++)
				ret = xioctl(vd->fd, VIDIOC_QUERYBUF, &vd->buf); //v4l2_buffer结构体
				vd->mem[i] = mmap(0 /* start anywhere */ ,vd->buf.length, PROT_READ | PROT_WRITE, MAP_SHARED, vd->fd,vd->buf.m.offset);   //每一个buffer对应的map到vd->mem[i]
			for(i = 0; i < NB_BUFFER; ++i) 
				ret = xioctl(vd->fd, VIDIOC_QBUF, &vd->buf); //把buf放入队列
		xioctl(vd->fd, VIDIOC_ENUMINPUT,  &in_struct) //获取输入设备类型   比如usb摄像头
		init_framebuffer
			vd->framesizeIn = (vd->width * vd->height << 1);   //行*列*2
			vd->framebuffer =(unsigned char *) calloc(1, (size_t) vd->width * (vd->height + 8) * 2);  //用于抓拍吗？ 
	initDynCtrls(this->fd);   //uvc驱动到v4l2驱动的映射 ？？
		xioctl(fd, UVCIOC_CTRL_ADD, &xu_ctrls[i])
	enumerateControls(pctx->videoIn, pctx->pglobal, id); // enumerate V4L2 controls after UVC extended mapping？？
	---------------------------------------------------------------------------------------------------------------------------
    input_run
	//int pthread_create(pthread_t  *restrict tidp, const  pthread_attr_t  *restrict_attr,   void*（*start_rtn)(void*),   void   *restrict   arg);
            //第一个参数为指向线程标识符的指针。

 	　　//第二个参数用来设置线程属性。

	　　//第三个参数是线程运行函数的地址。

	　　//最后一个参数是运行函数的参数。
	
	pthread_create(&(pctx->threadID), NULL, cam_thread, in);//最后一个参数表示创建线程的函数参数，入参
	//这个线程的创建到了内核态里面有点类似内核态进程的创建，fork，exec之后，原来的父进程按他原来的走，新创建的子进程也走他自己的
	//pthread_detach()即主线程与子线程分离，子线程结束后，资源自动回收。
	//pthread_join()即是子线程合入主线程，主线程阻塞等待子线程结束，然后回收子线程资源。
		cam_thread()  //this thread worker grabs a frame and copies it to the global buffer
			input * in = (input*)arg;
			context *pcontext = (context*)in->context;
			context_settings *settings = pcontext->init_settings;  //pcontext代表线程的一些配置，线程ID之类的，这个里面也包含初始的配置参数，就是后面的曝光，增益之类的这些参数
			pthread_cleanup_push(cam_cleanup, in);//设置线程退出时候的处理函数cam_cleanup
				V4L_INT_OPT
					input_cmd()
						v4l2SetControl(pctx->videoIn, control_id, value, plugin_number, pglobal);	
							//这个涉及struct v4l2_control 这个结构体，配置了
							xioctl(vd->fd, VIDIOC_S_CTRL, &control_s)
							//control_s.id = V4L2_CID_SHARPNESS
				//V4L2_CID_CONTRAST,V4L2_CID_SATURATION,V4L2_CID_BACKLIGHT_COMPENSATION
				//V4L2_CID_ROTATE,V4L2_CID_HFLIP,V4L2_CID_VFLIP,V4L2_CID_AUTOBRIGHTNESS
				//V4L2_CID_BRIGHTNESS,V4L2_CID_AUTO_WHITE_BALANCE,V4L2_CID_WHITE_BALANCE_TEMPERATURE
				//V4L2_CID_EXPOSURE_AUTO,V4L2_CID_EXPOSURE_ABSOLUTE
				//ret = ioctl(Handle, VIDIOC_G_CTRL, &ctrl);根据ctrl.id获取增益，或者曝光值驱动会存到ctrl.value
				//ret = ioctl(Handle, VIDIOC_S_CTRL, &ctrl);设置ctrl.value
				//获取范围
				//struct v4l2_queryctrl Setting;
				//Setting.id = V4L2_CID_GAIN;
				//ret = ioctl(Handle, VIDIOC_QUERYCTRL, &Setting);
 				control_s.id = control_id;
                		control_s.value = value;
				xioctl(vd->fd, VIDIOC_S_CTRL, &control_s)	//？？这个值在哪传进去的
				free(settings);
				settings = NULL;
				pcontext->init_settings = NULL; //注意这一串free后面的操作，free完之后，把这个指针弄成null
				if (softfps > 0) {
				pcontext->videoIn->soft_framedrop = 1;
				pcontext->videoIn->frame_period_time = 1000/softfps;
				}
				video_enable(pcontext->videoIn)
						xioctl(vd->fd, VIDIOC_STREAMON, &type);
				//signal_handler  global.stop = 1; 收到ctrl c的命令之后就会把stop置位
				//注意这个线程里面这里有个循环，会一直卡在这里，等待接收命令
				 while(!pglobal->stop) {
					while(pcontext->videoIn->streamingState == STREAMING_PAUSED) {
						usleep(1); // maybe not the best way so FIXME
					}
				FD_ZERO(&rd_fds);
				FD_SET(pcontext->videoIn->fd, &rd_fds);

				FD_ZERO(&ex_fds);
				FD_SET(pcontext->videoIn->fd, &ex_fds);

				FD_ZERO(&wr_fds);
				FD_SET(pcontext->videoIn->fd, &wr_fds);
				select(pcontext->videoIn->fd + 1, &rd_fds, &wr_fds, &ex_fds, &tv);//select函数监听fd接收状态，写入状态，错误状态，设置timeout时间
					else if (sel == 0）如果超时
						setResolution(pcontext->videoIn, pcontext->videoIn->width, pcontext->videoIn->height)//？？？？？？？
				FD_ISSET(pcontext->videoIn->fd, &rd_fds
					uvcGrab(pcontext->videoIn)//抓取一帧照片
						xioctl(vd->fd, VIDIOC_DQBUF, &vd->buf); //dequeue buffer  VIDIOC_DQBUF 命令向驱动获取已经存放有视频数据的缓存  驱动出队
						memset(&vd->buf, 0, sizeof(struct v4l2_buffer));
						vd->buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
						vd->buf.memory = V4L2_MEMORY_MMAP;
							case V4L2_PIX_FMT_MJPEG:
								memcpy(vd->tmpbuffer, vd->mem[vd->buf.index], vd->buf.bytesused);//vd->mem是内存映射到了vd->buf,截图的时候把这段内存直接拷贝到tmpbuffer
								vd->tmptimestamp = vd->buf.timestamp; //这个v4l2里面的buf还自带tmestamp？？？
						xioctl(vd->fd, VIDIOC_QBUF, &vd->buf);//requeue buffer   VIDIOC_QBUF 命令向驱动传递应用程序已经处理完的缓存，即将缓存加入空闲可捕获视频的队列
						pthread_mutex_lock(&pglobal->in[pcontext->id].db); //每一个input结构体都有一把线程锁
						//compress_image_to_jpeg  如果摄像头是YUV格式的话，下面进行YUV到JPEG的转换
						pglobal->in[pcontext->id].size =memcpy_picture(pglobal->in[pcontext->id].buf, pcontext->videoIn->tmpbuffer, pcontext->videoIn->tmpbytesused);//然后从tmpbuffer又拷贝到input.buf 这里面可能涉及到霍夫曼变化？？
						pglobal->in[pcontext->id].timestamp = pcontext->videoIn->tmptimestamp;
						pthread_cond_broadcast(&pglobal->in[pcontext->id].db_update);   //这个好像是要唤醒其他阻塞线程？？？？？解锁所有包含条件变量db_update的线程，感觉像是http的线程
						pthread_mutex_unlock(&pglobal->in[pcontext->id].db);
    ret = xioctl(vd->fd, VIDIOC_DQBUF, &vd->buf);				
	pthread_detach(pctx->threadID);//子线程和主线程分离，分开运行，有点像子进程和父进程fork之后，父进程还是跑自己的，子进程也继续跑



24、calloc配free

25、主流程
	global.in[i].init(&global.in[i].param, i)
	global.out[i].init(&global.out[i].param, i)
	global.in[i].run(i)
	global.out[i].run(global.out[i].param.id)
	
26、
struct v4l2_buffer {
	__u32                   index;
	enum v4l2_buf_type      type;
	__u32                   bytesused;
	__u32                   flags;
	enum v4l2_field         field;
	struct timeval          timestamp;
	struct v4l2_timecode    timecode;
	__u32                   sequence;
 
	/* memory location */
	enum v4l2_memory        memory;
	union {
	        __u32           offset;
	        unsigned long   userptr;
	} m;
	__u32                   length;
	__u32                   input;
	__u32                   reserved;
};


27、output_http.c
	output_init()
		port = htons(8080);  //进行主机序和网络序转换
		port = htons(atoi(optarg));//atoi转换遇到的字符串，只保留数字
		servers[param->id].id = param->id;
		servers[param->id].pglobal = param->global;
		servers[param->id].conf.port = port;
		servers[param->id].conf.hostname = hostname;
		servers[param->id].conf.credentials = credentials;
		servers[param->id].conf.www_folder = www_folder;
		servers[param->id].conf.nocommands = nocommands;
		
28、By default, everything will be compiled in "release" mode. If you wish to compile with debugging symbols enabled, you can do this
	cd mjpg-streamer-experimental
	make distclean
	make CMAKE_BUILD_TYPE=Debug
	sudo make install
	
29、http.h里面的context   \\每一个server的线程的context
	typedef struct {
    int sd[MAX_SD_LEN];
    int sd_len;
    int id;
    globals *pglobal;
    pthread_t threadID;
    config conf;
	} context;
	
	/* store configuration for each server instance */
	typedef struct {
    int port;
    char *hostname;
    char *credentials;
    char *www_folder;
    char nocommands;
	} config;
---------------------------------------------
	v4l2uvc.h里面的context	
	typedef struct {
    int id;
    globals *pglobal;
    pthread_t threadID;
    pthread_mutex_t controls_mutex;
    struct vdIn *videoIn;
    context_settings *init_settings;
	} context;

	
30、output_http.c
	Description.: Open a TCP socket and wait for clients to connect. If clients
              connect, start a new thread for each accepted connection.
	Input Value.: arg is a pointer to the globals struct
	Return Value: always NULL, will only return on exit
	
----------------------------------------------------------------------------------------


	output_run(int id)
		pthread_create(&(servers[id].threadID), NULL, server_thread, &(servers[id]));
			server_thread(void *arg)
				context *pcontext = arg;// context servers[MAX_OUTPUT_PLUGINS];
				pthread_cleanup_push(server_cleanup, pcontext);
				hints.ai_family = PF_UNSPEC;
				hints.ai_flags = AI_PASSIVE;
				hints.ai_socktype = SOCK_STREAM
				getaddrinfo(pcontext->conf.hostname, name, &hints, &aip)  ///* 将主机名和服务名映射到一个地址 */	
				pthread_mutex_init(&client_infos.mutex, NULL)
				bind(pcontext->sd[i], aip2->ai_addr, aip2->ai_addrlen)  //将一个socketfd绑定到一个socket adress结构，这个结构包括 地址，端口,IP信息
				listen(pcontext->sd[i], 10)    //监听的最大连接个数 10
				while(!pglobal->stop){				 
				do{
				FD_ZERO(&selectfds);
				err = select(max_fds + 1, &selectfds, NULL, NULL, NULL); // 这个select函数阻塞监听，直到selectfds里面的某个文件描述符发生变化
				//这个设置的selectfds是通过FD_SET(pcontext->sd[i], &selectfds);把他添加到这个selectfds里面的，最后一个参数是NULL，表示select处于阻塞状态，一定等到监视集合里面某个文件发生了变化
				}while(err <= 0); //这个是通过select 阻塞式等待嘛？返回0表示等待超时
				pcfd->fd = accept(pcontext->sd[i], (struct sockaddr *)&client_addr, &addr_len); //这个应该是返回的客户端的socketfd，即是 client_addr
                pcfd->pc = pcontext;
				getnameinfo((struct sockaddr *)&client_addr, addr_len, name, sizeof(name), NULL, 0, NI_NUMERICHOST)//根据接入的客户端的sockaddr 转换出client的name
				pcfd->client = add_client(name);//这个name传到这个函数里面就是address，/* client_info *add_client(char *address) */
					pthread_mutex_lock(&client_infos.mutex);    //锁放到要访问的数据类型结构体里面
					strcmp(client_infos.infos[i]->address, address)
					pthread_mutex_unlock(&client_infos.mutex);			
				pthread_create(&client, NULL, &client_thread, pcfd)
					client_thread()//参数就是pcfd  accept之后建立的新的socket的fd就存在pcfd->fd里面了，后面的读取数据就是读写这个fd
						memcpy(&lcfd, arg, sizeof(cfd));
						free(arg)   //注意这里可以直接free个指针，前面并没有malloc，只是说这个指针指向的一块地方不用了
						init_iobuffer(&iobuf);
							memset(iobuf->buffer, 0, sizeof(iobuf->buffer));
							iobuf->level = 0;
						init_request(&req);
							req->type        = A_UNKNOWN;
							req->parameter   = NULL;
							req->client      = NULL;
							req->credentials = NULL;
						memset(buffer, 0, sizeof(buffer));
						cnt = _readline(lcfd.fd, &iobuf, buffer, sizeof(buffer) - 1, 5)  //最后就把数存到了buffer里面
							_read(fd, iobuf, &c, 1, timeout)
								FD_ZERO(&fds);
								FD_SET(fd, &fds);
								rc = select(fd + 1, &fds, NULL, NULL, &tv)
								init_iobuffer(iobuf);
								iobuf->level = read(fd, &iobuf->buffer, IO_BUFFER) //前面用select了，并且socket连接已经建立，这里直接read
								memmove(iobuf->buffer + (IO_BUFFER - iobuf->level), iobuf->buffer, iobuf->level);//克服拷贝位置重叠的问题，对齐到buffer数组末尾
						// http://192.168.1.17:8080/?action=stream
				pthread_detach(client);
				}
				pthread_cleanup_pop(1);
		pthread_detach(servers[id].threadID);

31、struct addrinfo
{
  int ai_flags;                 /* Input flags.  */
  int ai_family;                /* Protocol family for socket.  */
  int ai_socktype;              /* Socket type.  */
  int ai_protocol;              /* Protocol for socket.  */  socket协议类型，TCP,UDP,IP协议
  socklen_t ai_addrlen;         /* Length of socket address.  */
  struct sockaddr *ai_addr;     /* Socket address for socket.  */
  char *ai_canonname;           /* Canonical name for service location.  */
  struct addrinfo *ai_next;     /* Pointer to next in list.  */
};


32、client_thread 客户进程中的关键结构体
		/* the iobuffer structure is used to read from the HTTP-client */
	typedef struct {
    int level;              /* how full is the buffer */  注意这个注释
    char buffer[IO_BUFFER]; /* the data */
	} iobuffer
	
-----------------------------------------------------------------------------------------
	typedef struct {
		answer_t type;
		char *parameter;
		char *client;
		char *credentials;
		char *query_string;
	} request;
	
33、
HTTP请求响应步骤
1、建立TCP连接
客户端(一般指浏览器)会以一个随机端口(1024<端口号<65535)向服务器的Web程序的80端口发起TCP的连接请求。这个连接请求到达服务器后，进入到网卡，然后是进入内核的TCP/IP协议栈，最终到达Web程序，建立TCP\IP的连接。这个过程被称为3次握手。
2、发送HTTP请求
通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行、请求正文构成。
3、服务器接受请求并返回HTTP响应
Web服务器解析请求，定位请求资源。服务器将资源复本写道TCP套接字，由客户端读取。一个响应由状态行、响应头部、空行、响应数据组成。
4、释放TCP连接
若connection模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，这个过程称之为4次挥手；若客户端模式为keepalive，则该连接会保持一段时间。
5、客户端浏览器解析HTML内容
客户端首先解析响应报文中的状态行，查看请求是否成功，然后解析每个响应头部。最后读取响应数据并格式化在浏览器中显示。

34、
在浏览器地址栏输入一个网址，会经历怎样的流程呢？
1、浏览器向DNS服务器请求解析URL中的域名对应的IP地址。
2、根据IP地址和默认端口，和服务器建立TCP连接。
3、浏览器发出HTTP请求，该请求报文作为TCP三次握手的第三个报文的数据发送给服务器。
4、服务器对浏览器做出响应，并把html文本发送给浏览器。
5、释放TCP连接
6、浏览器解析HTML内容，并对页面进行渲染呈现给用户


35、accept()的返回值
accept函数返回值成功时返回非负值，失败时返回-1

accept函数接受一个客户端请求后会返回一个新的SOCKFD值，当有不同的客户端同时有不同请求时，会返回不同的SOCKFD的值。这个不同的值和建立SOCKET 时生成的SOCKFD还是不同的。服务器与客户端之间的通信就是在这些不同的SOCKFD上进行的。

在服务器端，socket()返回的套接字用于监听（listen）和接受（accept）客户端的连接请求。这个套接字不能用于与客户端之间发送和接收数据。accept()接受一个客户端的连接请求，并返回一个新的套接字。所谓“新的”就是说这个套接字与socket()返回的用于监听和接受客户端的连接请求的套接字不是同一个套接字。与本次接受的客户端的通信是通过在这个新的套接字上发送和接收数据来完成的。

再次调用accept()可以接受下一个客户端的连接请求，并再次返回一个新的套接字（与socket()返回的套接字、之前accept()返回的套接字都不同的新的套接字）。这个新的套接字用于与这次接受的客户端之间的通信。假设一共有3个客户端连接到服务器端。那么在服务器端就一共有4个套接字：第1个是socket()返回的、用于监听的套接字；其余3个是分别调用3次accept()返回的不同的套接字。如果已经有客户端连接到服务器端，不再需要监听和接受更多的客户端连接的时候，可以关闭由socket()返回的套接字，而不会影响与客户端之间的通信。当某个客户端断开连接、或者是与某个客户端的通信完成之后，服务器端需要关闭用于与该客户端通信的套接字

36、 socket建立连接之后，可以用read和write函数
	ssize_t write(int fd, const void*buf,size_t nbytes);
	write函数将buf中的nbytes字节内容写入文件描述符fd.成功时返回写的字节数.失败时返
	
	ssize_t read(int fd,void *buf,size_t nbyte) 
	read函数是负责从fd中读取内容.当读成功 时,read返回实际所读的字节数

37、理一下大致流程
	1、建立服务端socket
	2、bind
	3、listen
	4、select等待有链接建立
	5、accept，返回客户端的socket fd
	6、建立clent thread
	7、然后就是socket链接建立，然后就可以直接read 这个fd，把http协议发过来的数据读到iobuffer，然后再拷贝到buffer里面
	8、strstr来获取buffer里面存的数是什么，根据不同的消息执行不同的流程，比如snap，或者stream等